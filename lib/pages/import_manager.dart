import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_archive/flutter_archive.dart';
import 'package:ml_dataframe/ml_dataframe.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:path_provider/path_provider.dart';
import 'package:robotz_garage_scouting/utils/file_io_helpers.dart';
import 'package:robotz_garage_scouting/utils/hash_helpers.dart';
import 'package:robotz_garage_scouting/utils/notification_helpers.dart';

class ImportManagerPage extends StatefulWidget {
  const ImportManagerPage({super.key});

  @override
  State<ImportManagerPage> createState() => _ImportManagerPageState();
}

class _ImportManagerPageState extends State<ImportManagerPage> {
  Map<String, dynamic>? input;

  /// Handles what happens when the QR Scanner reads a QR Code
  void _detectInput(capture) {
    final List<Barcode> barcodes = capture.barcodes;
    setState(() {
      input = decodeJsonFromB64(barcodes[0].rawValue!);
    });
  }

  /// Resets input state for cleanup
  void _clearInput() {
    setState(() {
      input = null;
    });
  }

  /// Handles saving Files from the QR Code provided. Assuming the code
  /// was generated by `export_manager.dart` we can
  /// 1. assume the schema of the b64 string
  /// 2. read the data
  /// 3. write the new files we want the user to have
  /// 4. ZIP the files into a single archive
  /// 5. Prompt the user to save to their desired location
  /// 6. Clean up metadata
  void _saveFilesFromQRCode() async {
    if (input == null) {
      errorMessageSnackbar(context, "Input cannot be empty.");
      return;
    }

    List<File> files = [];
    Future.forEach(input!.keys, (key) async {
      final Map<String, dynamic> fileData = input?[key];

      final List<dynamic> headers = fileData['header'];
      final Map<String, dynamic> rowsJson = fileData['rows'];

      final DataFrame df = DataFrame(
        [headers, ...rowsJson.values],
      );

      final File file =
          await createCSVFromDataFrame(df, prefix: key, prefixIsFileName: true);
      files.add(file);
    }).then((value) async {
      // generate a temporary zipfile location we plan to give to the user.
      File zipFile = File(await generateUniqueFilePath(
          extension: "zip", prefix: "received_data"));

      // Create the Zip file from the files we generated
      await ZipFile.createFromFiles(
          sourceDir: await getApplicationSupportDirectory(),
          files: files,
          zipFile: zipFile);

      // Clean up now unneeded files
      for (final file in files) {
        file.deleteSync();
      }

      // Save to device and cleanup
      saveFileToDevice(zipFile).then((File file) {
        zipFile.deleteSync();
        _clearInput();
        saveFileSnackbar(context, file);
      }).catchError((error) {
        errorMessageSnackbar(context, error);
      });
    }).catchError((error) {
      errorMessageSnackbar(context, error);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
            title: const Text(
          'Import Manager',
          textAlign: TextAlign.center,
        )),
        body: Align(
          alignment: Alignment.center,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              if (input != null && input!.isNotEmpty) ...[
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    OutlinedButton(
                        onPressed: _clearInput,
                        child: const Text("Look for new Data")),
                    ElevatedButton(
                        onPressed: _saveFilesFromQRCode,
                        child: const Text("Download Data")),
                  ],
                ),
                const Text("Found Files from QR Code"),
                ...input!.map((key, value) => MapEntry(key, Text(key))).values,
              ],
              if (input == null) ...[
                const Text(
                  "You can scan the QR Code generated from 'Export Manager' "
                  "on this screen. Just scan the QR Code in the camera view "
                  "below until you get the prompt to download data.",
                  textAlign: TextAlign.center,
                ),
                MobileScanner(
                  fit: BoxFit.contain,
                  controller: MobileScannerController(
                    returnImage: true,
                  ),
                  onDetect: _detectInput,
                ),
              ],
            ],
          ),
        ));
  }
}
